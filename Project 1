import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

data = pd.read_csv('heart.csv')

print("Initial Data Info:")
print(data.info())
print("\nInitial Data Description:")
print(data.describe())
print("\nMissing Values:")
print(data.isnull().sum())

data_cleaned = data.dropna()

print("\nMissing Values After Cleaning:")
print(data_cleaned.isnull().sum())

scaler = StandardScaler()
numerical_features = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']  # Adjust based on dataset columns
data_cleaned[numerical_features] = scaler.fit_transform(data_cleaned[numerical_features])

print("\nData Info After Cleaning:")
print(data_cleaned.info())
print("\nData Description After Cleaning:")
print(data_cleaned.describe())

plt.figure(figsize=(15, 10))
for i, feature in enumerate(numerical_features):
    plt.subplot(2, 3, i + 1)
    sns.boxplot(y=data_cleaned[feature])
    plt.title(f'Boxplot of {feature}')
plt.tight_layout()
plt.show()


X = data_cleaned.drop('target', axis=1)
y = data_cleaned['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print('MSE:', mean_squared_error(y_test, y_pred))
print('R-squared:', r2_score(y_test, y_pred))

plt.scatter(y_test, y_pred)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Heart Disease Risk')
plt.show()
