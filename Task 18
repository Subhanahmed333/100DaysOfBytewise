#Exercise 1


import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

df = pd.read_csv('Wholesale_customers_data.csv')

features = ['Fresh', 'Milk', 'Grocery', 'Frozen', 'Detergents_Paper', 'Delicassen']
X = df[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

n_clusters = 5
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

plt.figure(figsize=(10, 6))
scatter = plt.scatter(X['Fresh'], X['Milk'], c=df['Cluster'], cmap='viridis')
plt.xlabel('Fresh')
plt.ylabel('Milk')
plt.title('K-Means Clustering of Wholesale Customers')
plt.colorbar(scatter)
plt.show()

centroids = scaler.inverse_transform(kmeans.cluster_centers_)
centroid_df = pd.DataFrame(centroids, columns=features)
print("Cluster Centroids:")
print(centroid_df)


#Exercise 2


import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.metrics import silhouette_score

df = pd.read_csv('Wholesale_customers_data.csv')

features = ['Fresh', 'Milk', 'Grocery', 'Frozen', 'Detergents_Paper', 'Delicassen']
X = df[features]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

inertias = []
silhouette_scores = []
k_range = range(2, 11)

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertias.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X_scaled, kmeans.labels_))

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(k_range, inertias, 'bx-')
plt.xlabel('k')
plt.ylabel('Inertia')
plt.title('Elbow Method')

plt.subplot(1, 2, 2)
plt.plot(k_range, silhouette_scores, 'rx-')
plt.xlabel('k')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Score vs. k')

plt.tight_layout()
plt.show()

print("Inertia values:", inertias)
print("Silhouette scores:", silhouette_scores)


#Exercise 3


import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

df = pd.read_csv('Wholesale_customers_data.csv')

features = ['Fresh', 'Milk', 'Grocery', 'Frozen', 'Detergents_Paper', 'Delicassen']
X = df[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

n_clusters = 5
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

for i in range(n_clusters):
    print(f"\nCluster {i}:")
    print(df[df['Cluster'] == i][features].describe())

plt.figure(figsize=(12, 8))
for feature in features:
    plt.subplot(2, 3, features.index(feature) + 1)
    for i in range(n_clusters):
        cluster_data = df[df['Cluster'] == i]
        plt.hist(cluster_data[feature], alpha=0.5, label=f'Cluster {i}')
    plt.title(feature)
    plt.legend()
plt.tight_layout()
plt.show()



#Exercise 4


import pandas as pd
import numpy as np
from sklearn.cluster import AgglomerativeClustering
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import dendrogram, linkage

df = pd.read_csv('Wholesale_customers_data.csv')

features = ['Fresh', 'Milk', 'Grocery', 'Frozen', 'Detergents_Paper', 'Delicassen']
X = df[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

linkage_matrix = linkage(X_scaled, method='ward')

plt.figure(figsize=(12, 8))
dendrogram(linkage_matrix)
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Sample Index')
plt.ylabel('Distance')
plt.show()

n_clusters = 5
hierarchical = AgglomerativeClustering(n_clusters=n_clusters)
df['Hierarchical_Cluster'] = hierarchical.fit_predict(X_scaled)

kmeans = KMeans(n_clusters=n_clusters, random_state=42)
df['KMeans_Cluster'] = kmeans.fit_predict(X_scaled)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

ax1.scatter(X['Fresh'], X['Milk'], c=df['Hierarchical_Cluster'], cmap='viridis')
ax1.set_title('Hierarchical Clustering')
ax1.set_xlabel('Fresh')
ax1.set_ylabel('Milk')

ax2.scatter(X['Fresh'], X['Milk'], c=df['KMeans_Cluster'], cmap='viridis')
ax2.set_title('K-Means Clustering')
ax2.set_xlabel('Fresh')
ax2.set_ylabel('Milk')

plt.show()

print("Comparison of cluster assignments:")
print(pd.crosstab(df['Hierarchical_Cluster'], df['KMeans_Cluster']))



#Exercise 5


import pandas as pd
import numpy as np
from sklearn.cluster import KMeans, AgglomerativeClustering
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score, calinski_harabasz_score
import matplotlib.pyplot as plt

df = pd.read_csv('Wholesale_customers_data.csv')

features = ['Fresh', 'Milk', 'Grocery', 'Frozen', 'Detergents_Paper', 'Delicassen']
X = df[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

n_clusters = 5
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
hierarchical = AgglomerativeClustering(n_clusters=n_clusters)

kmeans_labels = kmeans.fit_predict(X_scaled)
hierarchical_labels = hierarchical.fit_predict(X_scaled)

def evaluate_clustering(X, labels):
    silhouette = silhouette_score(X, labels)
    calinski_harabasz = calinski_harabasz_score(X, labels)
    return silhouette, calinski_harabasz

kmeans_scores = evaluate_clustering(X_scaled, kmeans_labels)
hierarchical_scores = evaluate_clustering(X_scaled, hierarchical_labels)

print("K-Means Clustering:")
print(f"Silhouette Score: {kmeans_scores[0]:.4f}")
print(f"Calinski-Harabasz Score: {kmeans_scores[1]:.4f}")

print("\nHierarchical Clustering:")
print(f"Silhouette Score: {hierarchical_scores[0]:.4f}")
print(f"Calinski-Harabasz Score: {hierarchical_scores[1]:.4f}")

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

ax1.scatter(X['Fresh'], X['Milk'], c=kmeans_labels, cmap='viridis')
ax1.set_title('K-Means Clustering')
ax1.set_xlabel('Fresh')
ax1.set_ylabel('Milk')

ax2.scatter(X['Fresh'], X['Milk'], c=hierarchical_labels, cmap='viridis')
ax2.set_title('Hierarchical Clustering')
ax2.set_xlabel('Fresh')
ax2.set_ylabel('Milk')

plt.show()


